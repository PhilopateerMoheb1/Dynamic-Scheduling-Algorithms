/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package processmanager;

import java.awt.Color;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import static java.lang.Thread.sleep;
import java.text.DecimalFormat;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.naming.OperationNotSupportedException;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;

/**
 *
 * @author Ghaith
 */
public class MainUI extends javax.swing.JFrame {

    private static final DecimalFormat df = new DecimalFormat("#.###");

    private enum QueueTypes {
        PriorityQueue, FCFS, Roundrobin, SJF
    }
    private boolean prioritzed = false;
    private QueueTypes scheduleType = null;
    private boolean preemptive = false;

    private boolean paused;
    private boolean stopClicked = false;
    private boolean restartClicked = false;

    private int totalTAT = 0;
    private int totalWT = 0;

    private BufferedImage img;
    private int shift;
    private boolean RTS_mode = false;
    private Thread RTThread;
    private int untouchableRows = 0;

    private Simulation sim;
    private OpQueue queue;

    /**
     * Creates new form MainUI
     */
    public MainUI() {
        initComponents();
        inputTable.removeColumn(inputTable.getColumnModel().getColumn(3));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        inputTable = new javax.swing.JTable();
        jPanel1 = new RepaintingPanel();
        RTSButton = new javax.swing.JButton();
        stepButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        ISButton = new javax.swing.JButton();
        preemtivityPicker = new javax.swing.JComboBox<>();
        queuePicker = new javax.swing.JComboBox<>();
        quantomBox = new javax.swing.JSpinner();
        clearButton = new javax.swing.JButton();
        pauseButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        restartButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        AVG_TAT_box = new javax.swing.JTextField();
        AVG_WT_box = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jSlider1 = new javax.swing.JSlider();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Process scheduler");
        setMinimumSize(new java.awt.Dimension(1118, 741));
        setSize(new java.awt.Dimension(1118, 741));
        addWindowStateListener(new java.awt.event.WindowStateListener() {
            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                formWindowStateChanged(evt);
            }
        });

        inputTable.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        inputTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                { new Short((short) 1), null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Burst time", "Arrival time", "Priority", "Turn-around time", "Waiting time", "Response time", "Departure time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Short.class, java.lang.Short.class, java.lang.Short.class, java.lang.Short.class, java.lang.Short.class, java.lang.Short.class, java.lang.Short.class, java.lang.Short.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        inputTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        inputTable.setRowHeight(25);
        inputTable.setSurrendersFocusOnKeystroke(true);
        inputTable.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                inputTableAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        inputTable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                inputTableFocusLost(evt);
            }
        });
        jScrollPane1.setViewportView(inputTable);
        inputTable.getAccessibleContext().setAccessibleDescription("");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 219, Short.MAX_VALUE)
        );

        RTSButton.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        RTSButton.setText("Run Real Time Simulation");
        RTSButton.setEnabled(false);
        RTSButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RTSButtonActionPerformed(evt);
            }
        });

        stepButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/processmanager/icons8-forward-40.png"))); // NOI18N
        stepButton.setEnabled(false);
        stepButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stepButtonActionPerformed(evt);
            }
        });

        addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/processmanager/icons8-plus-24.png"))); // NOI18N
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        removeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/processmanager/icons8-minus-24.png"))); // NOI18N
        removeButton.setEnabled(false);
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel1.setText("Quantum Time:");
        jLabel1.setEnabled(false);

        ISButton.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        ISButton.setText("Run Instant Simulation");
        ISButton.setEnabled(false);
        ISButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ISButtonActionPerformed(evt);
            }
        });

        preemtivityPicker.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        preemtivityPicker.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Select preemptivity", "non-preemtive", "preemptive" }));
        preemtivityPicker.setEnabled(false);
        preemtivityPicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preemtivityPickerActionPerformed(evt);
            }
        });

        queuePicker.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        queuePicker.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Select scheduling algorithm", "Priority", "FCFS", "Round Robin", "SJF" }));
        queuePicker.setToolTipText("");
        queuePicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queuePickerActionPerformed(evt);
            }
        });

        quantomBox.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        quantomBox.setModel(new javax.swing.SpinnerNumberModel(Short.valueOf((short)1), Short.valueOf((short)1), Short.valueOf((short)50), Short.valueOf((short)1)));
        quantomBox.setEnabled(false);

        clearButton.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        clearButton.setText("Clear table");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        pauseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/processmanager/icons8-pause-80.png"))); // NOI18N
        pauseButton.setEnabled(false);
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButtonActionPerformed(evt);
            }
        });

        stopButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/processmanager/icons8-stop-40.png"))); // NOI18N
        stopButton.setEnabled(false);
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        restartButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/processmanager/icons8-restart-40.png"))); // NOI18N
        restartButton.setEnabled(false);
        restartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restartButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel2.setText("AVG turn-around time:");

        AVG_TAT_box.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        AVG_TAT_box.setFocusable(false);

        AVG_WT_box.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        AVG_WT_box.setFocusable(false);

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel3.setText("AVG waiting time:");

        jSlider1.setMaximum(10000);
        jSlider1.setValue(10000);
        jSlider1.setEnabled(false);
        jSlider1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jSlider1MouseDragged(evt);
            }
        });
        jSlider1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jSlider1MousePressed(evt);
            }
        });
        jSlider1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jSlider1KeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1068, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(removeButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(AVG_TAT_box, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(42, 42, 42))
                            .addComponent(preemtivityPicker, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(queuePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(AVG_WT_box, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(quantomBox, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(clearButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(stopButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(restartButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pauseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(stepButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(RTSButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ISButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jSlider1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(AVG_WT_box, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(AVG_TAT_box, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSlider1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(restartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(10, 10, 10)
                            .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(pauseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(queuePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(quantomBox, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ISButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(preemtivityPicker, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(RTSButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(stepButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void queuePickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queuePickerActionPerformed
        if (inputTable.isEditing()) {
            inputTable.getCellEditor().stopCellEditing();
        }
        if (inputTable.isEditing()) {
            inputTable.getCellEditor().stopCellEditing();
        }
        String scheduleTypeTxt = queuePicker.getSelectedItem().toString();
        if (scheduleTypeTxt.equals("Round Robin")) {
            if (prioritzed) {
                inputTable.removeColumn(inputTable.getColumnModel().getColumn(3));
                prioritzed = false;
            }
            quantomBox.setEnabled(true);
            jLabel1.setEnabled(true);
            scheduleType = QueueTypes.Roundrobin;
            preemtivityPicker.setEnabled(false);
            preemtivityPicker.setSelectedIndex(0);
            ISButton.setEnabled(true);
            RTSButton.setEnabled(true);

            return;
        }
        if (scheduleTypeTxt.equals("FCFS")) {
            if (prioritzed) {
                inputTable.removeColumn(inputTable.getColumnModel().getColumn(3));
                prioritzed = false;
            }
            quantomBox.setEnabled(false);
            jLabel1.setEnabled(false);
            scheduleType = QueueTypes.FCFS;
            preemtivityPicker.setEnabled(false);
            preemtivityPicker.setSelectedIndex(0);
            ISButton.setEnabled(true);
            RTSButton.setEnabled(true);

            return;
        }
        if (scheduleTypeTxt.equals("Priority")) {
            if (!prioritzed) {
                inputTable.addColumn(new TableColumn(3));
                inputTable.getColumnModel().moveColumn(7, 3);
                prioritzed = true;
            }
            DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
            centerRenderer.setHorizontalAlignment(JLabel.CENTER);

            inputTable.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);

            quantomBox.setEnabled(false);
            jLabel1.setEnabled(false);
            scheduleType = QueueTypes.PriorityQueue;
            preemtivityPicker.setEnabled(true);
            preemtivityPicker.setSelectedIndex(0);
            return;
        }
        if (scheduleTypeTxt.equals("SJF")) {
            if (prioritzed) {
                inputTable.removeColumn(inputTable.getColumnModel().getColumn(3));
                prioritzed = false;
            }
            quantomBox.setEnabled(false);
            jLabel1.setEnabled(false);
            scheduleType = QueueTypes.SJF;
            preemtivityPicker.setEnabled(true);
            preemtivityPicker.setSelectedIndex(0);
            return;
        }
        scheduleType = null;
        preemtivityPicker.setSelectedIndex(0);
        preemtivityPicker.setEnabled(false);
        if (prioritzed) {
            inputTable.removeColumn(inputTable.getColumnModel().getColumn(3));
            prioritzed = false;
        }

    }//GEN-LAST:event_queuePickerActionPerformed
    private boolean addToQueue(int beg) {
        DefaultTableModel model = (DefaultTableModel) inputTable.getModel();
        for (int i = beg; i < model.getRowCount(); i++) {
            Operation op;
            try {
                if (prioritzed) {
                    op = new Operation(i + 1, Integer.parseInt(model.getValueAt(i, 2).toString()), Integer.parseInt(model.getValueAt(i, 1).toString()), Integer.parseInt(model.getValueAt(i, 3).toString()));
                } else {
                    op = new Operation(i + 1, Integer.parseInt(model.getValueAt(i, 2).toString()), Integer.parseInt(model.getValueAt(i, 1).toString()));
                }
                queue.enqueue(op);

            } catch (IllegalArgumentException | NullPointerException e) {
                JOptionPane.showMessageDialog(new JFrame(), "one or more cells are empty or not excpected at line " + (i + 1), "ERROR", JOptionPane.ERROR_MESSAGE);

                return false;
            }
        }
        return true;
    }

    private void simulationStep() throws OperationNotSupportedException {
        sim.step();
        updateData();
    }

    private void updateData() {
        DefaultTableModel model = (DefaultTableModel) inputTable.getModel();
        img = sim.render();
        repaintSimulation();
        totalTAT = 0;
        totalWT = 0;
        queue.iterate().forEachRemaining((t) -> {

            int id = t.getID();
            int tat = t.getTATime();
            int wt = t.getWaiting();
            int dt = t.getResponseTime();
            int et = t.getExecutionTime();

            if (tat >= 0) {
                model.setValueAt(tat, id - 1, 4);
                totalTAT += tat;
            } else {
                totalTAT = Integer.MIN_VALUE;
            }
            if (wt >= 0) {
                model.setValueAt(wt, id - 1, 5);
                totalWT += wt;
            } else {
                totalWT = Integer.MIN_VALUE;
            }
            if (dt != Integer.MAX_VALUE) {
                model.setValueAt(dt - et, id - 1, 6);
                model.setValueAt(dt, id - 1, 7);
            }

        });

        if (totalTAT >= 0) {
            AVG_TAT_box.setText(df.format((float) totalTAT / inputTable.getRowCount()));
        }
        if (totalWT >= 0) {
            AVG_WT_box.setText(df.format((float) totalWT / inputTable.getRowCount()));
        }

        try {
            sliderEvent();
        } catch (NullPointerException e) {
        }
    }

    private void prepareSimulation(boolean instant) {

        if (inputTable.isEditing()) {
            inputTable.getCellEditor().stopCellEditing();
        }
        if (inputTable.isEditing()) {
            JOptionPane.showMessageDialog(new JFrame(), "please make sure to insert valid data!", "ERROR", JOptionPane.ERROR_MESSAGE);

            return;
        }

        switch (scheduleType) {
            case FCFS -> {
                queue = new FCFSQ();
            }
            case PriorityQueue -> {
                if (preemptive) {
                    queue = new PreemptivePriorityQ();
                } else {
                    queue = new PriorityQ();
                }
            }
            case Roundrobin -> {
                queue = new RoundRobin(Integer.parseInt(quantomBox.getValue().toString()));
            }
            case SJF -> {
                if (preemptive) {
                    queue = new PreemptiveSJFQ();
                } else {
                    queue = new SJFQ();
                }
            }
            default -> {

                queue = null;
            }
        }

        if (!addToQueue(0)) {
            return;
        }

        sim = Simulation.getInstance(queue, instant);
        jSlider1.setEnabled(true);
        updateData();

        if (!instant) {
            RTThread = new Thread(() -> {
                while (true) {

                    try {
                        for (int i = 0; i < 10; i++) {
                            if (stopClicked) {
                                stopClicked = false;
                                return;
                            }
                            if (restartClicked) {
                                restartClicked = false;
                                return;
                            }
                            Thread.sleep(100);
                        }

                        while (paused) {

                            if (stopClicked) {
                                stopClicked = false;
                                play();
                                return;
                            }
                            if (restartClicked) {
                                restartClicked = false;
                                play();
                                return;
                            }
                            Thread.sleep(100);//to solve bug of thread blocking main thread 
                        }
                        simulationStep();
                    } catch (OperationNotSupportedException | InterruptedException ex) {
                        Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }

            });
            RTThread.start();
            play();
            pauseButton.setEnabled(true);
            stopButton.setEnabled(true);
            restartButton.setEnabled(true);
            clearButton.setEnabled(false);
            preemtivityPicker.setEnabled(false);
            queuePicker.setEnabled(false);
            quantomBox.setEnabled(false);
            jLabel1.setEnabled(false);
            inputTable.setEnabled(false);
            ISButton.setEnabled(false);
            RTSButton.setEnabled(false);
            removeButton.setEnabled(false);
        }
    }
    private void ISButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ISButtonActionPerformed
        prepareSimulation(true);
    }//GEN-LAST:event_ISButtonActionPerformed

    private void RTSButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RTSButtonActionPerformed
        prepareSimulation(false);
        RTS_mode = true;
    }//GEN-LAST:event_RTSButtonActionPerformed
    private void pause() {
        untouchableRows = inputTable.getRowCount();
        inputTable.setEnabled(true);
        paused = true;
        pauseButton.setIcon(new ImageIcon("src/processmanager/icons8-play-80.png"));
        stepButton.setEnabled(true);

    }

    private void play() {

        paused = false;
        pauseButton.setIcon(new ImageIcon("src/processmanager/icons8-pause-80.png"));
        stepButton.setEnabled(false);

    }
    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
        if (inputTable.isEditing()) {
            inputTable.getCellEditor().stopCellEditing();
        }
        if (inputTable.isEditing()) {
            JOptionPane.showMessageDialog(new JFrame(), "please make sure to insert valid data!", "ERROR", JOptionPane.ERROR_MESSAGE);

            return;
        }
        if (paused) {
            if (!addToQueue(untouchableRows)) {
                return;
            }
            untouchableRows = inputTable.getRowCount();
            removeButton.setEnabled(false);
            play();

        } else
            pause();
    }//GEN-LAST:event_pauseButtonActionPerformed

    private void restartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restartButtonActionPerformed
        if (inputTable.isEditing()) {
            inputTable.getCellEditor().stopCellEditing();
        }
        if (inputTable.isEditing()) {
            JOptionPane.showMessageDialog(new JFrame(), "please make sure to insert valid data!", "ERROR", JOptionPane.ERROR_MESSAGE);

            return;
        }
        restartClicked = true;
        try {
            RTThread.join();
        } catch (InterruptedException ex) {
            Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        prepareSimulation(false);
    }//GEN-LAST:event_restartButtonActionPerformed

    private void stepButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stepButtonActionPerformed
        if (inputTable.isEditing()) {
            inputTable.getCellEditor().stopCellEditing();
        }
        if (inputTable.isEditing()) {
            JOptionPane.showMessageDialog(new JFrame(), "please make sure to insert valid data!", "ERROR", JOptionPane.ERROR_MESSAGE);

            return;
        }
        try {
            if (!addToQueue(untouchableRows)) {
                return;
            }
            simulationStep();

            removeButton.setEnabled(false);
            untouchableRows = inputTable.getRowCount();
        } catch (OperationNotSupportedException ex) {
            Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_stepButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        if (inputTable.isEditing()) {
            inputTable.getCellEditor().stopCellEditing();
        }
        if (inputTable.isEditing()) {
            inputTable.getCellEditor().stopCellEditing();
        }
        RTS_mode = false;
        stopClicked = true;
        try {
            RTThread.join();
        } catch (InterruptedException ex) {
            Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        pauseButton.setEnabled(false);
        stepButton.setEnabled(false);
        stopButton.setEnabled(false);
        restartButton.setEnabled(false);
        clearButton.setEnabled(true);
        if (scheduleType == QueueTypes.PriorityQueue || scheduleType == QueueTypes.SJF) {
            preemtivityPicker.setEnabled(true);
        }
        queuePicker.setEnabled(true);
        inputTable.setEnabled(true);
        ISButton.setEnabled(true);
        RTSButton.setEnabled(true);
        removeButton.setEnabled(true);
        if (scheduleType == QueueTypes.Roundrobin) {
            quantomBox.setEnabled(false);
            jLabel1.setEnabled(false);
        }
    }//GEN-LAST:event_stopButtonActionPerformed


    private void preemtivityPickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preemtivityPickerActionPerformed
        if (inputTable.isEditing()) {
            inputTable.getCellEditor().stopCellEditing();
        }
        if (inputTable.isEditing()) {
            inputTable.getCellEditor().stopCellEditing();
        }
        if (preemtivityPicker.getSelectedItem().toString().equals("--Select preemptivity")) {
            ISButton.setEnabled(false);
            RTSButton.setEnabled(false);
            preemptive = false;
        } else {

            ISButton.setEnabled(true);
            RTSButton.setEnabled(true);
            preemptive = preemtivityPicker.getSelectedItem().toString().equals("preemptive");
        }
    }//GEN-LAST:event_preemtivityPickerActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        if (inputTable.isEditing()) {
            inputTable.getCellEditor().stopCellEditing();
        }
        if (inputTable.isEditing()) {
            JOptionPane.showMessageDialog(new JFrame(), "cannot delete entries while editing!", "ERROR", JOptionPane.ERROR_MESSAGE);

            return;
        }
        DefaultTableModel model = (DefaultTableModel) this.inputTable.getModel();
        int[] rows = inputTable.getSelectedRows();
        if (rows.length == 0) {
            JOptionPane.showMessageDialog(new JFrame(), "select rows to be deleted!", "Warning",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (RTS_mode) {
            for (int row : rows) {
                if (row < untouchableRows) {
                    JOptionPane.showMessageDialog(new JFrame(), "you cannot delete a running process!", "Warning",
                            JOptionPane.WARNING_MESSAGE);
                    return;
                }
            }
        } else {
            newSim();
        }
        for (int i = 0; i < rows.length; i++) {
            model.removeRow(rows[i] - i);

        }

        for (int i = Arrays.stream(rows).min().getAsInt() + 1; i <= inputTable.getRowCount(); i++) {
            model.setValueAt(i, i - 1, 0);
        }
        int rowcnt = inputTable.getRowCount();
        if (rowcnt < 1) {
            model.addRow(new String[]{Integer.toString(rowcnt + 1), null, null, null, null, null, null, null, null});
        }

        if (rowcnt < 2 || (RTS_mode && rowcnt <= untouchableRows)) {
            removeButton.setEnabled(false);

        }

    }//GEN-LAST:event_removeButtonActionPerformed
    private void newSim() {
        img = null;
        ((RepaintingPanel) jPanel1).clear(jPanel1.getGraphics());
        jSlider1.setEnabled(false);
        AVG_TAT_box.setText("");
        AVG_WT_box.setText("");
    }
    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        if (inputTable.isEditing()) {
            inputTable.getCellEditor().stopCellEditing();
        }
        if (inputTable.isEditing()) {
            JOptionPane.showMessageDialog(new JFrame(), "cannot delete entries while editing!", "ERROR", JOptionPane.ERROR_MESSAGE);

            return;
        }
        DefaultTableModel model = (DefaultTableModel) this.inputTable.getModel();
        model.setNumRows(0);
        newSim();
        model.addRow(new String[]{"1", null, null, null, null, null, null, null, null});
        removeButton.setEnabled(false);
    }//GEN-LAST:event_clearButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        if (inputTable.isEditing()) {
            inputTable.getCellEditor().stopCellEditing();
        }
        if (RTS_mode) {
            if (!paused) {
                pause();
            }

        } else {
            newSim();
        }
        int rowcnt = inputTable.getRowCount();

        DefaultTableModel model = (DefaultTableModel) inputTable.getModel();

        removeButton.setEnabled(true);
        model.addRow(new String[]{Integer.toString(rowcnt + 1), null, null, null, null, null, null, null, null});

    }//GEN-LAST:event_addButtonActionPerformed

    private void repaintSimulation() {
//        Graphics graph = jPanel1.getGraphics();
//
//        graph.drawImage(img, -shift, 0, null);
//          graph.dispose();

        ((RepaintingPanel) jPanel1).setImage(img);

        ((RepaintingPanel) jPanel1).setShift(shift);

        jPanel1.repaint();
    }

    private void sliderEvent() throws NullPointerException {
        if (jSlider1.isEnabled()) {
            shift = ((jSlider1.getValue()) * (img.getWidth() - jPanel1.getWidth())) / jSlider1.getMaximum();
            repaintSimulation();
        }
    }

    private void jSlider1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSlider1MouseDragged
        sliderEvent();
    }//GEN-LAST:event_jSlider1MouseDragged

    private void jSlider1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jSlider1KeyPressed
        sliderEvent();
    }//GEN-LAST:event_jSlider1KeyPressed

    private void jSlider1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSlider1MousePressed
        sliderEvent();
    }//GEN-LAST:event_jSlider1MousePressed

    private void inputTableAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_inputTableAncestorAdded
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);

        for (int columnIndex = 0; columnIndex < inputTable.getModel().getColumnCount() - 1; columnIndex++) {

            inputTable.getColumnModel().getColumn(columnIndex).setCellRenderer(centerRenderer);

        }
        DefaultTableCellRenderer renderer = (DefaultTableCellRenderer) inputTable.getTableHeader().getDefaultRenderer();
        renderer.setHorizontalAlignment(0);
        inputTable.getTableHeader().setFont(new Font("SansSerif", Font.PLAIN, 14));
        inputTable.getTableHeader().setReorderingAllowed(false);
    }//GEN-LAST:event_inputTableAncestorAdded

    private void inputTableFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_inputTableFocusLost
        if (inputTable.isEditing()) {
            if (!RTS_mode) {
                newSim();
                return;
            }
            if (inputTable.getEditingRow() < untouchableRows) {
                inputTable.getCellEditor().stopCellEditing();
            }
        }
    }//GEN-LAST:event_inputTableFocusLost

    private void formWindowStateChanged(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowStateChanged

        repaintSimulation();

    }//GEN-LAST:event_formWindowStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainUI().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AVG_TAT_box;
    private javax.swing.JTextField AVG_WT_box;
    private javax.swing.JButton ISButton;
    private javax.swing.JButton RTSButton;
    private javax.swing.JButton addButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JTable inputTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JButton pauseButton;
    private javax.swing.JComboBox<String> preemtivityPicker;
    private javax.swing.JSpinner quantomBox;
    private javax.swing.JComboBox<String> queuePicker;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton restartButton;
    private javax.swing.JButton stepButton;
    private javax.swing.JButton stopButton;
    // End of variables declaration//GEN-END:variables
}
